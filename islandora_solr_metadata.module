<?php

/**
 * @file
 * The main module file for the islandora_solr_metadata module.
 */

use Drupal\Core\Cache\CacheableMetadata;

/**
 * Implements hook_theme().
 */
function islandora_solr_metadata_theme() {
  return [
    'islandora_solr_metadata_display' => [
      'template' => 'theme/islandora-solr-metadata-display',
      // We can add PIDs to the end of this pattern in our preprocess function
      // and templates will be able to have have a pid appended to the
      // template name to overide a template on a per object basis.
      // An example template might be named:
      // "islandora-solr-metadata-display--islandora-27.tpl.php".
      'pattern' => 'islandora_solr_metadata_display__',
      'variables' => [
        'islandora_object' => NULL,
        'print' => FALSE,
        'solr_fields' => [],
        'found' => FALSE,
        'associations' => [],
      ],
      'file' => 'theme/theme.inc',
    ],
    'islandora_solr_metadata_description' => [
      'template' => 'theme/islandora-solr-metadata-description',
      // We can add PIDs to the end of this pattern in our preprocess function
      // and templates will be able to have have a pid appended to the
      // template name to overide a template on a per object basis.
      // An example template might be named:
      // "islandora-solr-metadata-description--islandora-27.tpl.php".
      'pattern' => 'islandora_solr_metadata_description__',
      'variables' => [
        'islandora_object' => NULL,
        'solr_fields' => [],
        'combine' => TRUE,
        'found' => FALSE,
        'associations' => [],
      ],
      'file' => 'theme/theme.inc',
    ],
  ];
}

/**
 * Access callback for accessing a configuration based upon ID.
 *
 * @param string $configuration_name
 *   The name of the list we are accessing.
 *
 * @return bool
 *   TRUE if the user has permission and the list exists, FALSE otherwise.
 */
function islandora_solr_metadata_access($configuration_name) {
  module_load_include('inc', 'islandora_solr_metadata', 'includes/db');
  return islandora_solr_metadata_configuration_exists($configuration_name) && \Drupal::currentUser()->hasPermission('administer islandora_solr_metadata');
}

/**
 * Access callback for accessing field configuration.
 *
 * @param string $configuration_name
 *   The name of the list we are accessing.
 * @param string $escaped_field
 *   The name of the Solr field with slashes escaped, as per
 *   islandora_solr_replace_slashes().
 *
 * @return bool
 *   TRUE if the user has access to the configuration and the field exists in
 *   the configuration, FALSE otherwise.
 */
function islandora_solr_metadata_field_configuration_access($configuration_name, $escaped_field) {
  module_load_include('inc', 'islandora_solr', 'includes/utilities');
  module_load_include('inc', 'islandora_solr_metadata', 'includes/db');
  return islandora_solr_metadata_access($configuration_name) && array_key_exists(islandora_solr_restore_slashes($escaped_field), islandora_solr_metadata_get_fields($configuration_name, FALSE));
}

/**
 * Title callback for the configuration display.
 *
 * @param string $configuration_name
 *   The name of the configuration we are getting a title for.
 *
 * @return string
 *   The name of the configuration that is to be edited.
 */
function islandora_solr_metadata_display_configuration_name($configuration_name) {
  return t('@configuration_name display configuration', [
    '@configuration_name' => \Drupal::config('islandora_solr_metadata.configs')->get("configs.$configuration_name.label"),
  ]);
}

/**
 * Title callback for the field configuration display.
 *
 * @param string $configuration_name
 *   The name of the configuration we are retrieving the title of.
 * @param string $escaped_field_name
 *   The (escaped) name of the field being manipulated.
 *
 * @return string
 *   The name of the configuration that is to be edited.
 */
function islandora_solr_metadata_display_field_configuration_name($configuration_name, $escaped_field_name) {
  module_load_include('inc', 'islandora_solr', 'includes/utilities');
  return t('@field configuration, in @display', [
    '@field' => islandora_solr_restore_slashes($escaped_field_name),
    '@display' => \Drupal::config('islandora_solr_metadata.configs')->get("configs.$configuration_name.label"),
  ]);
}

/**
 * Implements hook_islandora_metadata_display_info().
 */
function islandora_solr_metadata_islandora_metadata_display_info() {
  return [
    'islandora_solr_metadata' => [
      'label' => t('Islandora Solr Metadata'),
      'description' => t('Metadata display driven by the Islandora Solr Search module.'),
      'metadata callback' => 'islandora_solr_metadata_display_callback',
      'description callback' => 'islandora_solr_metadata_description_callback',
      'configuration' => 'islandora_solr_metadata.metadata_display',
    ],
  ];
}

/**
 * Implements callback_islandora_metadata_display() from Solr.
 */
function islandora_solr_metadata_display_callback(AbstractObject $object, $print = FALSE) {
  module_load_include('inc', 'islandora_solr_metadata', 'includes/db');
  $elements = [
    '#islandora_object' => $object,
    '#print' => $print,
    '#associations' => islandora_solr_metadata_get_associations_by_cmodels($object->models),
  ];
  \Drupal::moduleHandler()->alter('islandora_solr_metadata_display_elements', $elements);
  if (count($elements['#associations']) > 0) {
    $markup = [
      '#theme' => 'islandora_solr_metadata_display',
    ] + $elements;
    return $markup;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements callback_islandora_description_display() from Solr.
 */
function islandora_solr_metadata_description_callback(AbstractObject $object) {
  module_load_include('inc', 'islandora_solr_metadata', 'includes/db');
  module_load_include('module', 'islandora');
  $object = islandora_object_load($object->id);
  $elements = [
    '#islandora_object' => $object,
    '#associations' => islandora_solr_metadata_get_associations_by_cmodels($object->models),
  ];
  \Drupal::moduleHandler()->alter('islandora_solr_metadata_description_elements', $elements);
  if (count($elements['#associations']) > 0) {
    $markup = [
      '#theme' => 'islandora_solr_metadata_description',
    ] + $elements;
    return $markup;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_preprocess_islandora_dublin_core_display().
 *
 * While the metadata display system could use an overhaul this should let us
 * invalidate the cache for now.
 */
function islandora_solr_metadata_preprocess_islandora_dublin_core_display(&$variables) {
  $config = \Drupal::config('islandora_solr_metadata.configs');

  CacheableMetadata::createFromRenderArray($variables)
    ->addCacheableDependency($config)
    ->applyTo($variables);
}

/**
 * Implements hook_preprocess_islandora_dublin_core_description().
 *
 * While the description display system could use an overhaul this should let
 * us invalidate the cache for now.
 */
function islandora_solr_metadata_preprocess_islandora_dublin_core_description(&$variables) {
  $config = \Drupal::config('islandora_solr_metadata.configs');

  CacheableMetadata::createFromRenderArray($variables)
    ->addCacheableDependency($config)
    ->applyTo($variables);
}
