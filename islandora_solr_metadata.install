<?php

/**
 * @file
 * Implementations of installation hooks.
 */

use Drupal\Core\Database\Connection;
use Drupal\Core\Database\Schema;

/**
 * Implements hook_schema().
 */
function islandora_solr_metadata_schema() {
  $schema['islandora_solr_metadata_cmodels'] = [
    'description' => 'Table that stores content models associated to configurations.',
    'fields' => [
      'configuration_name' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'The name of the configuration which this field belongs to.',
      ],
      'cmodel' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'The name of the content model assigned to this configuration.',
      ],
    ],
    'primary_key' => ['configuration_name', ['cmodel', 191]],
  ];
  return $schema;
}

/**
 * Migrate old Drupal database fields into the new configuration.
 */
function islandora_solr_metadata_update_8001() {
  $db = \Drupal::database();
  $tx = $db->startTransaction();
  $schema = $db->schema();

  if (!$schema->tableExists('islandora_solr_metadata_fields') || !$schema->tableExists('islandora_solr_metadata_associations')) {
    return t('No islandora_solr_metadata_fields table and/or islandora_solr_metadata_associations table found in the database; nothing to import');
  }

  try {
    $completed = _islandora_solr_metadata_update_8001($db, $schema);
    return t("Migrated @count Solr metadata configurations", ['@count' => $completed]);
  }
  catch (Exception $e) {
    $tx->rollback();
    throw $e;
  }
}

/**
 * Helper; bulk of the logic for islandora_solr_metadata_update_8001().
 *
 * @param \Drupal\Core\Database\Connection $db
 *   An established DB connection.
 * @param \Drupal\Core\Database\Schema $schema
 *   The DB schema.
 */
function _islandora_solr_metadata_update_8001(Connection $db, Schema $schema) {
  // This table is going to be rebuilt as we create the new configs, so just get
  // the data, dump it, and then reconfigure it.
  $old_cmodel_assoc = $db->select('islandora_solr_metadata_cmodels', 'ismc')
    ->fields('ismc', [])
    ->execute()
    ->fetchAll(PDO::FETCH_ASSOC);
  $db->delete('islandora_solr_metadata_cmodels')
    ->execute();
  // Specifically in the case where this is being ported from Drupal 7,
  // configurations no longer have integer identifiers, so this field needs to
  // be replaced with the new version.
  if ($schema->fieldExists('islandora_solr_metadata_cmodels', 'configuration_id')) {
    $schema->dropPrimaryKey('islandora_solr_metadata_cmodels');
    $schema->dropField('islandora_solr_metadata_cmodels', 'configuration_id');
    $schema->addField('islandora_solr_metadata_cmodels',
      'configuration_name',
      [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'The name of the configuration to which this field belongs.',
      ],
      [
        'primary_key' => ['configuration_name', ['cmodel', 191]],
      ]);
  }

  $associations = $db->select('islandora_solr_metadata_associations', 'isma')
    ->fields('isma', [])
    ->execute()
    // XXX: Machine was not _strictly_ defined as being unique; it was only the
    // form interactions which attempted to prevent duplicated... If there
    // _does_ happen to be collisions between them, we'll only use one of 'em,
    // here.
    ->fetchAllAssoc('machine_name', PDO::FETCH_ASSOC);
  $config = \Drupal::configFactory()->getEditable('islandora_solr_metadata.configs');

  // Only grabbing the class, since we only use static methods here.
  $field_config = \Drupal::service('islandora_solr_metadata.field_config');
  $empty_field = get_class($field_config)::getEmptyField();
  $empty_truncation = get_class($field_config)::getEmptyTruncation();

  $apply_truncation_casts = function ($truncation) use ($empty_truncation) {
    $casts = [
      'max_length' => 'int',
      'word_safe' => 'bool',
      'ellipsis' => 'bool',
      'min_wordsafe_length' => 'int',
    ];

    settype($truncation, 'array');
    $truncation += $empty_truncation;

    foreach ($casts as $offset => $actual_type) {
      settype($truncation[$offset], $actual_type);
    }

    return $truncation;
  };

  $completed = 0;
  foreach ($associations as $configuration_name => $association) {
    $fields = $db->select('islandora_solr_metadata_fields', 'ismf')
      ->fields('ismf', [])
      ->condition('configuration_id', $association['configuration_id'])
      ->execute()
      ->fetchAll(PDO::FETCH_ASSOC);

    // Add the association proper.
    $new_assoc = $field_config::getEmptyConfig();
    $new_assoc['label'] = $association['configuration_name'];
    foreach ($old_cmodel_assoc as $old_assoc) {
      if ($old_assoc['configuration_id'] == $association['configuration_id']) {
        $new_assoc['cmodel_associations'][] = $old_assoc['cmodel'];
      }
    }

    $new_assoc['description'] = [
      'description_field' => $association['description_field'],
      'description_label' => $association['description_label'],
      'truncation' => $apply_truncation_casts(unserialize($association['description_data'])['truncation']),
    ];

    assert(0 === \Drupal::service('config.typed')
      ->createFromNameAndData('islandora_solr_metadata.truncation_options', $new_assoc['description']['truncation'])
      ->validate()
      ->count(), "$configuration_name description truncation config is valid.");

    $config->set("configs.$configuration_name", $new_assoc);
    // Add the fields.
    foreach ($fields as $field) {
      $field += unserialize($field['data']);

      $new_field = array_intersect_key($field, $empty_field) + $empty_field;

      $new_field['truncation'] = $apply_truncation_casts($new_field['truncation']);

      assert(0 === \Drupal::service('config.typed')
        ->createFromNameAndData('islandora_solr_metadata.truncation_options', $new_field['truncation'])
        ->validate()
        ->count(), "$configuration_name/{$field['solr_field']} truncation config is valid.");

      // XXX: Given how role identification has changed between D7 and D8, where
      // D7 used numeric IDs while D8 uses machine names, and it is unknown at
      // time of writing how to discover/hook into the mapping, let's just drop
      // the permission configuration.
      if ($field['permissions']['enable_permissions']) {
        \Drupal::logger('islandora_solr_metadata-7to8')->warning(t('@name/@field had permissions associated which we have not migrated.', [
          '@name' => $configuration_name,
          '@field' => $field['solr_field'],
        ]));
      }
      $new_field['enable_permissions'] = FALSE;
      $new_field['permissions'] = NULL;

      assert(0 === \Drupal::service('config.typed')
        ->createFromNameAndData('islandora_solr_metadata.field', $new_field)
        ->validate()
        ->count(), "$configuration_name/{$field['solr_field']} field is valid.");

      $field_config->setField($field['solr_field'], $new_field, $configuration_name);
    }
    $completed++;
  }
  $config->save(TRUE);
  $schema->dropTable('islandora_solr_metadata_fields');
  $schema->dropTable('islandora_solr_metadata_associations');
  return $completed;
}
